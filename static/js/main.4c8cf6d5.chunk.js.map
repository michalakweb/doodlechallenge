{"version":3,"sources":["components/Navbar.js","components/MessageList.js","components/SendMessageForm.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","react_default","a","createElement","className","MessageList","props","messages","map","message","key","_id","author","SendMessageForm","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","handleChange","bind","assertThisInitialized","handleSubmit","e","setState","target","value","preventDefault","sendMessage","onSubmit","onChange","placeholder","type","React","Component","App","getData","_this2","fetch","then","response","json","data","values","toConsumableArray","_this3","method","headers","Accept","Content-Type","body","JSON","stringify","concat","components_Navbar","components_MessageList","components_SendMessageForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c8cf6d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Navbar = () => (\r\n    <div className='title'>\r\n        <h1 className='title-h1'>Doodle Chat App</h1>\r\n    </div>\r\n)\r\n\r\nexport default Navbar;","import React from 'react';\r\n\r\n//Messages are fetched into state, passed down as props\r\n//and mapped to become an unordered list element\r\nconst MessageList = (props) => (\r\n    <div>\r\n        <ul className='messageList'>\r\n            {\r\n                props.messages.map(message => (\r\n                    <li \r\n                    className='message'\r\n                    key={message._id}>\r\n                        <div>{message.author}</div>\r\n                        <div>{message.message}</div>\r\n                    </li>\r\n                ))\r\n            }\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default MessageList;","import React from 'react';\r\n\r\nclass SendMessageForm extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            message: ''\r\n        }\r\n        this.handleChange = this.handleChange.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this)\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({\r\n            message: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit(e) {\r\n        e.preventDefault();\r\n        this.props.sendMessage(this.state.message);\r\n        this.setState({\r\n            message: ''\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form\r\n                    onSubmit={this.handleSubmit}\r\n                    className='sendMessage-form'\r\n                >\r\n                    <input \r\n                        className='sendMessage-form-input'\r\n                        onChange={this.handleChange}\r\n                        value={this.state.message}\r\n                        placeholder=\"Type message and press Enter\"\r\n                        type=\"text\"\r\n                    />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SendMessageForm;","import React from 'react';\r\nimport './App.css';\r\n\r\n// Components\r\nimport Navbar from './components/Navbar';\r\nimport MessageList from './components/MessageList';\r\nimport SendMessageForm from './components/SendMessageForm';\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n        messages: []\r\n    }\r\n    this.sendMessage = this.sendMessage.bind(this)\r\n    this.getData = this.getData.bind(this)\r\n  } \r\n\r\n  // App loads data once the component mounts\r\n  componentDidMount() {\r\n    this.getData();\r\n  }\r\n\r\n  // getting data is a fucntion, because it will also\r\n  // be called when a new message is sent\r\n  getData() {\r\n    fetch('https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0/?token=6bMaqT4jsfNY')\r\n    .then(response => response.json())\r\n    .then(\r\n      data => {\r\n        data = Object.values(data);\r\n        this.setState({messages: [...data]});\r\n      }\r\n    )\r\n  }\r\n\r\n  // message is sent via a post method \r\n  // and then component updates its state via getData()\r\n  sendMessage(message) {\r\n    fetch('https://chatty.kubernetes.doodle-test.com/api/chatty/v1.0/?token=6bMaqT4jsfNY', {\r\n        method: 'post',\r\n        headers: {\r\n            'Accept': 'application/json, text/plain, */*',\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({message: `${message}`, author: 'Mateusz'})\r\n    })\r\n    .then(() => {\r\n        this.getData();\r\n    }\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='container'>\r\n        <div className='column'>\r\n          <Navbar/>\r\n        </div>\r\n        <div className='column--list'>\r\n          <MessageList messages={this.state.messages} />\r\n        </div>\r\n        <div className='column'>\r\n          <SendMessageForm sendMessage={this.sendMessage}/>\r\n        </div>\r\n        \r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}